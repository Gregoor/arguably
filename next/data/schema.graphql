type Language {
  # The ID of an object
  id: ID!
  name: String!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Proposition implements Node {
  name: String!
  published: Boolean!
  sourceURL: String
  text: String!

  # The ID of an object
  id: ID!
  language: Language
}

input PropositionOrder {
  by: PropositionOrderBy!
  desc: Boolean
}

enum PropositionOrderBy {
  CREATED_AT
  VOTES
}

type PropositionRelation implements Node, PropositionRelationsParent {
  # The ID of an object
  id: ID!
  childCount: Int!
  children(languages: [ID], order: PropositionOrder, query: String, after: String, first: Int, before: String, last: Int): PropositionRelationConnection
  parent: Proposition!
  proposition: Proposition!
  type: PropositionType
}

# A connection to a list of items.
type PropositionRelationConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PropositionRelationEdge]
}

# An edge in a connection.
type PropositionRelationEdge {
  # The item at the end of the edge
  node: PropositionRelation

  # A cursor for use in pagination
  cursor: String!
}

interface PropositionRelationsParent {
  id: ID!
  childCount: Int!
  children(languages: [ID], order: PropositionOrder, query: String, after: String, first: Int, before: String, last: Int): PropositionRelationConnection
}

enum PropositionType {
  PRO
  CONTRA
}

type Query {
  viewer: Viewer
}

type User {
  name: String!
  canVote: Boolean!
  canPublish: Boolean!

  # The ID of an object
  id: ID!
}

type Viewer implements Node, PropositionRelationsParent {
  id: ID!
  user: User
  childCount: Int!
  children(languages: [ID], order: PropositionOrder, query: String, after: String, first: Int, before: String, last: Int): PropositionRelationConnection
  languages: [Language]!
}
